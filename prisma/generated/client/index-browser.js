
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClientsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  address: 'address',
  is_deleted: 'is_deleted',
  payment_ref: 'payment_ref'
};

exports.Prisma.Invoice_itemsScalarFieldEnum = {
  id: 'id',
  invoice_id: 'invoice_id',
  product_id: 'product_id',
  name_snapshot: 'name_snapshot',
  price_snapshot: 'price_snapshot',
  quantity: 'quantity',
  total: 'total'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  client_id: 'client_id',
  invoice_number: 'invoice_number',
  start_date: 'start_date',
  due_date: 'due_date',
  notes: 'notes',
  status: 'status',
  total: 'total',
  is_deleted: 'is_deleted',
  payment_method: 'payment_method'
};

exports.Prisma.Products_servicesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  name: 'name',
  description: 'description',
  price: 'price',
  is_deleted: 'is_deleted',
  type: 'type',
  unit: 'unit'
};

exports.Prisma.User_profilesScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  first_name: 'first_name',
  last_name: 'last_name',
  phone: 'phone',
  profile_img: 'profile_img'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  is_verified: 'is_verified'
};

exports.Prisma.Recurring_invoiceScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  client_id: 'client_id',
  invoice_number: 'invoice_number',
  start_date: 'start_date',
  due_date: 'due_date',
  recurrence: 'recurrence',
  notes: 'notes',
  next_run: 'next_run',
  is_active: 'is_active',
  is_deleted: 'is_deleted',
  total: 'total'
};

exports.Prisma.Recurring_invoice_itemScalarFieldEnum = {
  id: 'id',
  recurring_invoice_id: 'recurring_invoice_id',
  product_id: 'product_id',
  name_snapshot: 'name_snapshot',
  price_snapshot: 'price_snapshot',
  quantity: 'quantity',
  total: 'total'
};

exports.Prisma.User_payment_methodScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  payment_method: 'payment_method',
  account_name: 'account_name',
  account_number: 'account_number',
  qris_image_url: 'qris_image_url',
  is_active: 'is_active'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  Bank_Transfer: 'Bank_Transfer',
  Dana: 'Dana',
  Gopay: 'Gopay',
  Shopeepay: 'Shopeepay',
  Qris: 'Qris'
};

exports.Status = exports.$Enums.Status = {
  Pending: 'Pending',
  Paid: 'Paid',
  Overdue: 'Overdue'
};

exports.Type = exports.$Enums.Type = {
  Service: 'Service',
  Product: 'Product'
};

exports.Unit = exports.$Enums.Unit = {
  Pcs: 'Pcs',
  Hour: 'Hour',
  Day: 'Day'
};

exports.Prisma.ModelName = {
  clients: 'clients',
  invoice_items: 'invoice_items',
  invoices: 'invoices',
  products_services: 'products_services',
  user_profiles: 'user_profiles',
  users: 'users',
  recurring_invoice: 'recurring_invoice',
  recurring_invoice_item: 'recurring_invoice_item',
  user_payment_method: 'user_payment_method'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
